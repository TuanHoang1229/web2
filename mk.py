import streamlit as st
from PIL import Image
import random
import string
import hashlib

st.set_page_config(page_title="H·ªçc Tin H·ªçc", layout="wide")

# Sidebar navigation
pages = {
    "Trang ch·ªß": "home",
    "Thi·∫øt k·∫ø Web c∆° b·∫£n": "web_design",
    "An to√†n th√¥ng tin": "cyber_security",
    "Kho t√†i li·ªáu": "resources",
    "Tr·∫Øc nghi·ªám t·ª± luy·ªán": "quiz",
    "G√≥c chia s·∫ª": "sharing",
    "Ki·ªÉm tra m·∫≠t kh·∫©u": "password_checker"
}

page = st.sidebar.radio("Ch·ªçn chuy√™n m·ª•c:", list(pages.keys()))

if page == "Trang ch·ªß":
    st.title("Ch√†o m·ª´ng ƒë·∫øn v·ªõi Website H·ªçc Tin H·ªçc")
    st.markdown("""
    ### M·ª•c ti√™u:
    Trang web h·ªó tr·ª£ h·ªçc sinh ti·∫øp c·∫≠n ki·∫øn th·ª©c Tin h·ªçc th√¥ng qua c√°c chuy√™n ƒë·ªÅ h·ªçc t·∫≠p, t√†i li·ªáu, video v√† b√†i th·ª±c h√†nh.

    ### Li√™n k·∫øt nhanh:
    - [Thi·∫øt k·∫ø Web](https://www.youtube.com/watch?v=f_YT3hqi6hc)
    - [An to√†n th√¥ng tin](#)

    ### Tin m·ªõi:
    - C·∫≠p nh·∫≠t th√™m 5 b√†i tr·∫Øc nghi·ªám m·ªõi v·ªÅ An to√†n th√¥ng tin
    - Th√™m file m·∫´u Word/Excel m·ªõi
    """)

elif page == "Thi·∫øt k·∫ø Web c∆° b·∫£n":
    st.header("Thi·∫øt k·∫ø Web v·ªõi HTML/CSS")
    st.markdown("""
    #### H∆∞·ªõng d·∫´n:
    ```html
    <!DOCTYPE html>
    <html>
    <head><title>Trang c·ªßa t√¥i</title></head>
    <body><h1>Xin ch√†o!</h1></body>
    </html>
    ```
    """)
    st.download_button("T·∫£i m·∫´u trang web", "<html>...</html>", file_name="index.html")

elif page == "An to√†n th√¥ng tin":
    st.header("üîê An to√†n Th√¥ng tin")
    st.markdown("""
    ### üß© T√¨nh hu·ªëng:
    **B·∫°n nh·∫≠n ƒë∆∞·ª£c email t·ª´ ng∆∞·ªùi l·∫° v·ªõi t·ªáp ƒë√≠nh k√®m. B·∫°n n√™n l√†m g√¨?**
    - ‚ùå Kh√¥ng m·ªü t·ªáp ƒë√≠nh k√®m kh√¥ng r√µ ngu·ªìn g·ªëc.
    - ‚úÖ Ki·ªÉm tra k·ªπ ƒë·ªãa ch·ªâ ng∆∞·ªùi g·ª≠i.
    """)

    if st.button("üëâ Tr·∫Øc nghi·ªám √¥n t·∫≠p"):
        st.session_state.page = "Tr·∫Øc nghi·ªám t·ª± luy·ªán"
        st.experimental_rerun()

elif page == "Kho t√†i li·ªáu":
    st.header("Kho t√†i li·ªáu")
    st.markdown("### T√†i li·ªáu PDF:")
    st.download_button("T·∫£i PDF b√†i gi·∫£ng", "fake_pdf", file_name="baigiang.pdf")

elif page == "Tr·∫Øc nghi·ªám t·ª± luy·ªán":
    st.header("üß† Tr·∫Øc nghi·ªám t·ª± luy·ªán")

    # Dictionary l∆∞u tr·ªØ danh s√°ch c√¢u h·ªèi cho t·ª´ng chuy√™n ƒë·ªÅ
    question_bank = {
        "An to√†n th√¥ng tin": [
            {
                "question": "1. B·∫°n n√™n l√†m g√¨ khi nh·∫≠n ƒë∆∞·ª£c email t·ª´ ng∆∞·ªùi l·∫° k√®m t·ªáp ƒë√≠nh k√®m?",
                "options": ["M·ªü ngay t·ªáp ƒë·ªÉ xem n·ªôi dung", "Chuy·ªÉn ti·∫øp cho b·∫°n b√®", "Kh√¥ng m·ªü v√† xo√° email", "Tr·∫£ l·ªùi email ƒë√≥"],
                "answer": "Kh√¥ng m·ªü v√† xo√° email"
            },
            {
                "question": "2. M·∫≠t kh·∫©u m·∫°nh n√™n bao g·ªìm?",
                "options": ["T√™n v√† ng√†y sinh", "Ch·ªâ ch·ªØ th∆∞·ªùng", "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng", "M·∫≠t kh·∫©u d·ªÖ nh·ªõ"],
                "answer": "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng"
            },
            {
                "question": "3. Khi truy c·∫≠p Wi-Fi c√¥ng c·ªông, b·∫°n n√™n?",
                "options": ["Truy c·∫≠p ng√¢n h√†ng online", "Kh√¥ng d√πng c√°c d·ªãch v·ª• quan tr·ªçng", "G·ª≠i m·∫≠t kh·∫©u qua email", "C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh"],
                "answer": "Kh√¥ng d√πng c√°c d·ªãch v·ª• quan tr·ªçng"
            }
        ],
        "Thi·∫øt k·∫ø web c∆° b·∫£n": [
            {
                "question": "1. Th·∫ª n√†o d√πng ƒë·ªÉ t·∫°o ti√™u ƒë·ªÅ l·ªõn nh·∫•t trong HTML?",
                "options": ["<title>", "<head>", "<h1>", "<header>"],
                "answer": "<h1>"
            },
            {
                "question": "2. Thu·ªôc t√≠nh n√†o c·ªßa CSS d√πng ƒë·ªÉ ƒë·ªïi m√†u ch·ªØ?",
                "options": ["font-size", "background-color", "color", "text-align"],
                "answer": "color"
            },
            {
                "question": "3. C·∫∑p th·∫ª n√†o d√πng ƒë·ªÉ t·∫°o li√™n k·∫øt ƒë·∫øn trang web kh√°c?",
                "options": ["<img>", "<a>", "<link>", "<div>"],
                "answer": "<a>"
            }
        ]
    }

    topic = st.selectbox("Ch·ªçn chuy√™n ƒë·ªÅ:", list(question_bank.keys()))
    questions = question_bank[topic]

    st.markdown("### Tr·∫£ l·ªùi c√°c c√¢u h·ªèi:")

    user_answers = []
    for i, q in enumerate(questions):
        answer = st.radio(q["question"], q["options"], key=f"{topic}_q_{i}")
        user_answers.append(answer)

    if st.button("N·ªôp b√†i", key=f"{topic}_submit"):
        score = sum(1 for i, q in enumerate(questions) if user_answers[i] == q["answer"])
        st.success(f"‚úÖ B·∫°n ƒë∆∞·ª£c {score}/{len(questions)} ƒëi·ªÉm")

        st.markdown("### ƒê√°p √°n ƒë√∫ng:")
        for i, q in enumerate(questions):
            st.markdown(f"**C√¢u {i+1}:** {q['answer']}")


elif page == "G√≥c chia s·∫ª":
    st.header("G√≥c chia s·∫ª - G·ª≠i b√†i th·ª±c h√†nh")
    st.markdown("G·ª≠i b√†i qua Google Forms:")
    st.markdown("[Bi·ªÉu m·∫´u g·ª≠i b√†i](https://forms.gle/...)")
    st.markdown("Ho·∫∑c chia s·∫ª tr√™n Notion (n·∫øu c√≥ t√†i kho·∫£n).")

elif page == "Ki·ªÉm tra m·∫≠t kh·∫©u":
    # T√≠nh ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
    def calculate_strength(password):
        strength = 0
        if len(password) >= 8:
            strength += 1
        if any(c.islower() for c in password):
            strength += 1
        if any(c.isupper() for c in password):
            strength += 1
        if any(c.isdigit() for c in password):
            strength += 1
        if any(c in string.punctuation for c in password):
            strength += 1
        return strength
    
    # UI
    st.header("üîê Tr√¨nh t·∫°o m·∫≠t kh·∫©u m·∫°nh")
    
    length = st.number_input("ƒê·ªô d√†i m·∫≠t kh·∫©u", min_value=6, max_value=100, value=12)
    
    if st.button("T·∫°o m·∫≠t kh·∫©u"):
        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))
        st.text_input("M·∫≠t kh·∫©u c·ªßa b·∫°n", password)
        
        strength = calculate_strength(password)
        strength_labels = ["R·∫•t y·∫øu", "Y·∫øu", "Trung b√¨nh", "M·∫°nh", "R·∫•t m·∫°nh"]
        st.progress(strength * 20)
        st.success(f"ƒê·ªô m·∫°nh: {strength_labels[strength - 1] if strength else 'R·∫•t y·∫øu'}")
    
        if st.button("L∆∞u m·∫≠t kh·∫©u (SHA-256)"):
            hashed = hashlib.sha256(password.encode()).hexdigest()
            with open("saved_passwords.txt", "a") as f:
                f.write(hashed + "\n")
            st.success("ƒê√£ l∆∞u m·∫≠t kh·∫©u (d·∫°ng SHA-256) v√†o file.")
            
    def calculate_strength(password):
        strength = 0
        if len(password) >= 8:
            strength += 1
        if any(c.islower() for c in password):
            strength += 1
        if any(c.isupper() for c in password):
            strength += 1
        if any(c.isdigit() for c in password):
            strength += 1
        if any(c in string.punctuation for c in password):
            strength += 1
        return strength
    
    def password_strength_text(score):
        if score <= 2:
            return "‚ùå Y·∫øu", "red"
        elif score == 3 or score == 4:
            return "‚ö†Ô∏è Trung b√¨nh", "orange"
        else:
            return "‚úÖ M·∫°nh", "green"
    
    st.title("üîê Ki·ªÉm tra ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u")
    
    password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password")
    
    if password:
        score = calculate_strength(password)
        strength_text, color = password_strength_text(score)
        
        st.markdown(f"**ƒê√°nh gi√°:** <span style='color:{color}'>{strength_text}</span>", unsafe_allow_html=True)
        st.progress(score * 20)
    
        
        
