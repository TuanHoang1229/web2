import streamlit as st
import random
import string
import hashlib
from PIL import Image

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="H·ªçc Tin H·ªçc", layout="wide")

# Hi·ªÉn th·ªã ·∫£nh g√≥c tr√™n b√™n tr√°i
col1, col2 = st.columns([10, 1])
with col1:
    st.image("https://github.com/TuanHoang1229/web2/blob/main/IMG_2935.JPG", width=80)

# --- Kh·ªüi t·∫°o session ---
if "page" not in st.session_state:
    st.session_state.page = "Trang ch·ªß"

# --- Sidebar Navigation ---
pages = {
    "Trang ch·ªß": "home",
    "Thi·∫øt k·∫ø Web c∆° b·∫£n": "web_design",
    "An to√†n th√¥ng tin": "cyber_security",
    "Kho t√†i li·ªáu": "resources",
    "Tr·∫Øc nghi·ªám t·ª± luy·ªán": "quiz",
    "G√≥c chia s·∫ª": "sharing",
    "Ki·ªÉm tra m·∫≠t kh·∫©u": "password_checker"
}
page = st.sidebar.radio("Ch·ªçn chuy√™n m·ª•c:", list(pages.keys()))

# --- Trang Ch·ªß ---
if page == "Trang ch·ªß":
    st.title("üìò Ch√†o m·ª´ng ƒë·∫øn v·ªõi G√≥c T·ª± H·ªçc Tin h·ªçc")
    st.markdown("""
### üí° Gi·ªõi thi·ªáu:
Trang web n√†y ƒë∆∞·ª£c x√¢y d·ª±ng nh·∫±m h·ªó tr·ª£ h·ªçc sinh THCS v√† THPT h·ªçc t·∫≠p v√† th·ª±c h√†nh c√°c k·ªπ nƒÉng **Tin h·ªçc hi·ªán ƒë·∫°i** nh∆∞:

- L·∫≠p tr√¨nh Scratch
- Thi·∫øt k·∫ø Web c∆° b·∫£n v·ªõi HTML/CSS
- Tin h·ªçc vƒÉn ph√≤ng (Word, Excel, PowerPoint)
- An to√†n th√¥ng tin

---

### üéØ M·ª•c ti√™u:
- H·ªçc qua th·ª±c h√†nh
- N√¢ng cao t∆∞ duy logic v√† k·ªπ nƒÉng s·ª≠ d·ª•ng m√°y t√≠nh
- T·ª± tin ·ª©ng d·ª•ng c√¥ng ngh·ªá trong h·ªçc t·∫≠p v√† ƒë·ªùi s·ªëng

---

### üó∫Ô∏è G·ª£i √Ω ph∆∞∆°ng ph√°p h·ªçc t·∫≠p:
1. **B·∫Øt ƒë·∫ßu v·ªõi l√Ω thuy·∫øt c∆° b·∫£n**
2. **Xem video v√† l√†m b√†i t·∫≠p**
3. **L√†m tr·∫Øc nghi·ªám √¥n t·∫≠p**
4. **Chia s·∫ª b√†i th·ª±c h√†nh c·ªßa b·∫°n**
5. **Luy·ªán k·ªπ c√°c nƒÉng an to√†n**
6. **TƒÉng c∆∞·ªùng m·∫∑t kh·∫©u c·ªßa b·∫°n**
   **L∆∞u √Ω:** B·∫°n c√≥ th·ªÉ chia s·∫ª c√°c √Ω ki·∫øn c√° nh√¢n trong form nhaa!

---

### üöÄ Chuy√™n m·ª•c n·ªïi b·∫≠t:
- [üîß Thi·∫øt k·∫ø Web c∆° b·∫£n](#)
- [üîê An to√†n th√¥ng tin](#)
- [üìÅ Kho t√†i li·ªáu th·ª±c h√†nh](#)
- [üß† Tr·∫Øc nghi·ªám t·ª± luy·ªán](#)
- [üí¨ G√≥c chia s·∫ª b√†i l√†m](#)
- [üîë Ki·ªÉm tra m·∫∑t kh·∫©u](#)

---

### üß≠ H∆∞·ªõng d·∫´n:
- D√πng thanh b√™n tr√°i ƒë·ªÉ ch·ªçn chuy√™n m·ª•c.
- M·ªói m·ª•c c√≥ video, t√†i li·ªáu v√† b√†i t·∫≠p k√®m theo.
- ƒê·ª´ng qu√™n l√†m tr·∫Øc nghi·ªám ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c nh√©!

---

> **‚ÄúC√¥ng ngh·ªá s·∫Ω kh√¥ng thay th·∫ø gi√°o vi√™n, nh∆∞ng gi√°o vi√™n bi·∫øt c√¥ng ngh·ªá s·∫Ω thay th·∫ø ng∆∞·ªùi kh√¥ng bi·∫øt.‚Äù**  
> ‚Äì **Ray Clifford**
""")

# --- Thi·∫øt k·∫ø Web ---
elif page == "Thi·∫øt k·∫ø Web c∆° b·∫£n":
    st.header("üñ•Ô∏è Thi·∫øt k·∫ø Web c∆° b·∫£n v·ªõi HTML & CSS")

    # Gi·ªõi thi·ªáu ki·∫øn th·ª©c
    st.markdown("""
    ### Gi·ªõi thi·ªáu nhanh:
    - **HTML**: D√πng ƒë·ªÉ x√¢y d·ª±ng c·∫•u tr√∫c trang web.
    - **CSS**: D√πng ƒë·ªÉ t·∫°o ki·ªÉu d√°ng (m√†u s·∫Øc, font ch·ªØ, b·ªë c·ª•c).
    - M·ªôt s·ªë th·∫ª HTML c∆° b·∫£n: `<h1>`, `<p>`, `<a>`, `<img>`, `<div>`
    - M·ªôt s·ªë thu·ªôc t√≠nh CSS th∆∞·ªùng g·∫∑p: `color`, `font-size`, `margin`, `padding`, `background-color`
    """)

    # V√≠ d·ª• minh ho·∫°
    st.markdown("### V√≠ d·ª• ƒë∆°n gi·∫£n v·ªõi HTML + CSS:")
    st.code("""
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            h1 { color: blue; }
            p { font-size: 16px; }
        </style>
    </head>
    <body>
        <h1>Xin ch√†o!</h1>
        <p>ƒê√¢y l√† trang web ƒë·∫ßu ti√™n c·ªßa t√¥i.</p>
    </body>
    </html>
    """, language="html")

    # N√∫t t·∫£i file m·∫´u
    html_file = """
<!DOCTYPE html>
<html>
<head>
    <style>
        h1 { color: blue; }
        p { font-size: 16px; }
    </style>
</head>
<body>
    <h1>Xin ch√†o!</h1>
    <p>ƒê√¢y l√† trang web ƒë·∫ßu ti√™n c·ªßa t√¥i.</p>
</body>
</html>
"""
    st.download_button("T·∫£i file HTML m·∫´u", html_file, file_name="mau_trang_web.html")

    # Th·ª≠ th√°ch th·ª±c h√†nh
    st.markdown("""
    ### Th·ª≠ th√°ch:
    T·∫°o m·ªôt trang web c√≥:
    - M·ªôt ti√™u ƒë·ªÅ l·ªõn
    - M·ªôt ƒëo·∫°n vƒÉn m√¥ t·∫£
    - M·ªôt h√¨nh ·∫£nh t·ª´ Internet
    - M·ªôt li√™n k·∫øt ƒë·∫øn Google

    **G·ª£i √Ω:** D√πng c√°c th·∫ª `<h1>`, `<p>`, `<img>`, `<a>`
    """)

    # H·ªçc th√™m
    st.markdown("""
    ### T√†i li·ªáu th√™m:
    - [Video h∆∞·ªõng d·∫´n HTML c∆° b·∫£n](https://www.youtube.com/watch?v=Ke90Tje7VS0)
    - [T√†i li·ªáu CSS t·∫°i W3Schools](https://www.w3schools.com/css/)
    """)

    # Mini quiz
    st.markdown("### Tr·∫Øc nghi·ªám nhanh:")
    q1 = st.radio("1. Th·∫ª n√†o d√πng ƒë·ªÉ t·∫°o ti√™u ƒë·ªÅ l·ªõn nh·∫•t?", ["<p>", "<h1>", "<title>", "<div>"], key="web_q1")
    q2 = st.radio("2. Thu·ªôc t√≠nh n√†o ƒë·ªÉ ƒë·ªïi m√†u ch·ªØ trong CSS?", ["font-size", "color", "background-color", "margin"], key="web_q2")
    
    if st.button("N·ªôp c√¢u tr·∫£ l·ªùi", key="submit_web_quiz"):
        score = 0
        if q1 == "<h1>": score += 1
        if q2 == "color": score += 1
        st.success(f"‚úÖ B·∫°n tr·∫£ l·ªùi ƒë√∫ng {score}/2 c√¢u.")
        if score == 2:
            st.balloons()

# --- An to√†n th√¥ng tin ---
elif page == "An to√†n th√¥ng tin":
    st.header("üîê An to√†n Th√¥ng tin")

    # Ki·∫øn th·ª©c c∆° b·∫£n
    st.markdown("""
    ### Ki·∫øn th·ª©c c∆° b·∫£n:
    - **M·∫≠t kh·∫©u m·∫°nh** n√™n c√≥ ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.
    - **Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u** qua email hay tin nh·∫Øn.
    - **Kh√¥ng nh·∫•n v√†o li√™n k·∫øt l·∫°** trong email t·ª´ ng∆∞·ªùi l·∫°.
    - **C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm th∆∞·ªùng xuy√™n** ƒë·ªÉ tr√°nh l·ªó h·ªïng b·∫£o m·∫≠t.
    """)

    # T√¨nh hu·ªëng th·ª±c t·∫ø
    st.markdown("""
    ### T√¨nh hu·ªëng:
    B·∫°n nh·∫≠n ƒë∆∞·ª£c email t·ª´ m·ªôt ƒë·ªãa ch·ªâ l·∫° v·ªõi ti√™u ƒë·ªÅ "B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng!" v√† t·ªáp ƒë√≠nh k√®m l√† file `.exe`.  
    **B·∫°n n√™n l√†m g√¨?**
    - Kh√¥ng m·ªü t·ªáp ƒë√≠nh k√®m
    - Ki·ªÉm tra ƒë·ªãa ch·ªâ ng∆∞·ªùi g·ª≠i
    - B√°o c√°o cho gi√°o vi√™n ho·∫∑c qu·∫£n tr·ªã m·∫°ng
    """)

    # Danh s√°ch m·∫πo
    st.markdown("""
    ### M·∫πo an to√†n khi d√πng Internet:
    - S·ª≠ d·ª•ng x√°c th·ª±c 2 y·∫øu t·ªë (2FA)
    - Kh√¥ng d√πng chung m·ªôt m·∫≠t kh·∫©u cho nhi·ªÅu t√†i kho·∫£n
    - Kh√¥ng d√πng Wi-Fi c√¥ng c·ªông cho vi·ªác quan tr·ªçng
    - ƒêƒÉng xu·∫•t sau khi d√πng xong m√°y t√≠nh c√¥ng c·ªông
    """)

    # H·ªçc th√™m
    st.markdown("""
    ### M·ªôt s·ªë c√°ch ƒë·ªÉ ph√≤ng tr√°nh:
    - [Video: L√†m sao ƒë·ªÉ an to√†n tr√™n m·∫°ng?](https://www.youtube.com/watch?v=1I4FZ6Nkm4A)
    - [C·∫©m nang an to√†n th√¥ng tin c·ªßa VNPT](https://attt.vnpt.vn)
    """)

    # Tr·∫Øc nghi·ªám nh·ªè
    st.markdown("### Tr·∫Øc nghi·ªám nhanh:")
    q1 = st.radio("1. M·∫≠t kh·∫©u an to√†n n√™n ch·ª©a?", [
        "Ng√†y sinh", "Ch·ªâ ch·ªØ th∆∞·ªùng", "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng", "T√™n ng∆∞·ªùi th√¢n"
    ], key="sec_q1")

    q2 = st.radio("2. Khi nh·∫≠n ƒë∆∞·ª£c email l·∫° c√≥ t·ªáp ƒë√≠nh k√®m, b·∫°n n√™n?", [
        "M·ªü ngay ƒë·ªÉ xem n·ªôi dung", "X√≥a email v√† kh√¥ng m·ªü t·ªáp", "Chuy·ªÉn ti·∫øp cho b·∫°n b√®", "Tr·∫£ l·ªùi email"
    ], key="sec_q2")

    if st.button("N·ªôp c√¢u tr·∫£ l·ªùi", key="submit_sec_quiz"):
        score = 0
        if q1 == "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng": score += 1
        if q2 == "X√≥a email v√† kh√¥ng m·ªü t·ªáp": score += 1
        st.success(f"‚úÖ B·∫°n tr·∫£ l·ªùi ƒë√∫ng {score}/2 c√¢u.")

        if score == 2:
            st.balloons()

# --- Kho t√†i li·ªáu ---
elif page == "Kho t√†i li·ªáu":
    st.header("üìö Kho t√†i li·ªáu")
    st.markdown("### T√†i li·ªáu PDF:")
    st.download_button("‚¨áÔ∏è T·∫£i PDF b√†i gi·∫£ng", "N·ªôi dung gi·∫£ ƒë·ªãnh", file_name="baigiang.pdf")

# --- Tr·∫Øc nghi·ªám t·ª± luy·ªán ---
elif page == "Tr·∫Øc nghi·ªám t·ª± luy·ªán":
    st.header("üß† Tr·∫Øc nghi·ªám t·ª± luy·ªán")

    question_bank = {
        "An to√†n th√¥ng tin": [
            {
                "question": "C√¢u h·ªèi 1: B·∫°n n√™n l√†m g√¨ khi nh·∫≠n ƒë∆∞·ª£c email t·ª´ ng∆∞·ªùi l·∫° k√®m t·ªáp ƒë√≠nh k√®m?",
                "options": ["M·ªü ngay t·ªáp ƒë·ªÉ xem", "Chuy·ªÉn ti·∫øp", "Kh√¥ng m·ªü v√† xo√° email", "Tr·∫£ l·ªùi email"],
                "answer": "Kh√¥ng m·ªü v√† xo√° email"
            },
            {
                "question": "C√¢u h·ªèi 2: M·∫≠t kh·∫©u m·∫°nh n√™n bao g·ªìm?",
                "options": ["T√™n", "Ch·ªØ th∆∞·ªùng", "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng", "D·ªÖ nh·ªõ"],
                "answer": "K√Ω t·ª± ƒë·∫∑c bi·ªát, s·ªë, ch·ªØ hoa th∆∞·ªùng"
            },
            {
                "question": "C√¢u h·ªèi 3. Khi truy c·∫≠p Wi-Fi c√¥ng c·ªông, b·∫°n n√™n?",
                "options": ["Ng√¢n h√†ng online", "Kh√¥ng d√πng d·ªãch v·ª• quan tr·ªçng", "G·ª≠i m·∫≠t kh·∫©u", "C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh"],
                "answer": "Kh√¥ng d√πng d·ªãch v·ª• quan tr·ªçng"
            }
        ],
        "Thi·∫øt k·∫ø web c∆° b·∫£n": [
            {
                "question": "C√¢u h·ªèi 1: Th·∫ª n√†o t·∫°o ti√™u ƒë·ªÅ l·ªõn nh·∫•t trong HTML?",
                "options": ["<title>", "<head>", "<h1>", "<header>"],
                "answer": "<h1>"
            },
            {
                "question": "C√¢u h·ªèi 2: CSS thu·ªôc t√≠nh n√†o ƒë·ªïi m√†u ch·ªØ?",
                "options": ["font-size", "background-color", "color", "text-align"],
                "answer": "color"
            },
            {
                "question": "C√¢u h·ªèi 3: Th·∫ª n√†o t·∫°o li√™n k·∫øt web?",
                "options": ["<img>", "<a>", "<link>", "<div>"],
                "answer": "<a>"
            }
        ]
    }

    topic = st.selectbox("Ch·ªçn chuy√™n ƒë·ªÅ:", list(question_bank.keys()))
    questions = question_bank[topic]

    st.markdown("### üìã Tr·∫£ l·ªùi c√¢u h·ªèi:")

    user_answers = []
    for i, q in enumerate(questions):
        ans = st.radio(q["question"], q["options"], key=f"{topic}_{i}")
        user_answers.append(ans)

    if st.button("üì§ N·ªôp b√†i"):
        score = sum(1 for i, q in enumerate(questions) if user_answers[i] == q["answer"])
        st.success(f"‚úÖ B·∫°n ƒë∆∞·ª£c {score}/{len(questions)} ƒëi·ªÉm")
        if score == len(questions):
            st.balloons()

        st.markdown("### ‚úÖ ƒê√°p √°n:")
        for i, q in enumerate(questions):
            st.markdown(f"**C√¢u {i+1}:** {q['answer']}")

# --- G√≥c chia s·∫ª ---
elif page == "G√≥c chia s·∫ª":
    st.header("üì¨ G√≥c chia s·∫ª - G·ª≠i b√†i th·ª±c h√†nh")
    st.markdown("G·ª≠i qua Google Forms d∆∞·ªõi ƒë√¢y:")
    st.markdown("[üìé Bi·ªÉu m·∫´u g·ª≠i b√†i](https://forms.gle/...)")

# --- Ki·ªÉm tra m·∫≠t kh·∫©u ---
elif page == "Ki·ªÉm tra m·∫≠t kh·∫©u":
    st.header("üîê Ki·ªÉm tra & T·∫°o m·∫≠t kh·∫©u m·∫°nh")

    def calculate_strength(password):
        score = 0
        if len(password) >= 8: score += 1
        if len(password) >= 12: score += 5
        if any(c.islower() for c in password): score += 1
        if any(c.isupper() for c in password): score += 1
        if any(c.isdigit() for c in password): score += 1
        if any(c in string.punctuation for c in password): score += 1
        return score

    def strength_text(score):
        if score <= 2: return "‚ùå Y·∫øu", "red"
        elif score <= 4: return "‚ö†Ô∏è Trung b√¨nh", "orange"
        else: return "‚úÖ M·∫°nh", "green"

    tab1, tab2 = st.tabs(["üîé Ki·ªÉm tra m·∫≠t kh·∫©u", "‚öôÔ∏è T·∫°o m·∫≠t kh·∫©u m·ªõi"])

    with tab1:
        pwd = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password")
        if pwd:
            score = calculate_strength(pwd)
            text, color = strength_text(score)
            st.markdown(f"**ƒê√°nh gi√°:** <span style='color:{color}'>{text}</span>", unsafe_allow_html=True)
            st.progress(score * 20)

    with tab2:
        length = st.slider("Ch·ªçn ƒë·ªô d√†i m·∫≠t kh·∫©u", 6, 50, 12)
        if st.button("üé≤ T·∫°o m·∫≠t kh·∫©u"):
            chars = string.ascii_letters + string.digits + string.punctuation
            gen_pwd = ''.join(random.choice(chars) for _ in range(length))
            st.text_input("üîë M·∫≠t kh·∫©u ƒë√£ t·∫°o:", gen_pwd)

            score = calculate_strength(gen_pwd)
            text, color = strength_text(score)
            st.markdown(f"**ƒê·ªô m·∫°nh:** <span style='color:{color}'>{text}</span>", unsafe_allow_html=True)
            st.progress(score * 20)

            if st.button("üíæ L∆∞u m·∫≠t kh·∫©u SHA-256"):
                hashed = hashlib.sha256(gen_pwd.encode()).hexdigest()
                with open("saved_passwords.txt", "a") as f:
                    f.write(hashed + "\n")
                st.success("ƒê√£ l∆∞u m·∫≠t kh·∫©u d∆∞·ªõi d·∫°ng SHA-256!")

                with open("saved_passwords.txt", "r") as f:
                    st.download_button("üì• T·∫£i file SHA-256", f.read(), file_name="saved_passwords.txt")
